// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnLineStore.Infrastructure.Data;

#nullable disable

namespace OnLineStore.Infrastructure.Migrations
{
    [DbContext(typeof(OnlineStoreDbContext))]
    [Migration("20250923135140_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("TId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("T_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("UId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("U_ID");

                    b.HasKey("TId")
                        .HasName("PK__cart__83BB1FB2C45EA22C");

                    b.HasIndex("UId");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Item_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("P_ID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("TId")
                        .HasColumnType("int")
                        .HasColumnName("T_ID");

                    b.HasKey("ItemId")
                        .HasName("PK__cart_ite__A3420A77B4AE4BA1");

                    b.HasIndex("PId");

                    b.HasIndex("TId");

                    b.ToTable("cart_item", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Catagory", b =>
                {
                    b.Property<int>("CId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("C_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CId"));

                    b.Property<string>("CName")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("C_name");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CId")
                        .HasName("PK__catagory__A9FDEC12AFAD3BAB");

                    b.ToTable("catagory", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("O_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool?>("Paid")
                        .HasColumnType("bit")
                        .HasColumnName("paid");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("status");

                    b.Property<int?>("TId")
                        .HasColumnType("int")
                        .HasColumnName("T_ID");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("Total_Price");

                    b.Property<string>("UId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("U_ID");

                    b.HasKey("OId")
                        .HasName("PK___Order__5AAB0C18D36137AC");

                    b.HasIndex("TId");

                    b.HasIndex("UId");

                    b.ToTable("_Order", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Product", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("P_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"));

                    b.Property<int?>("CId")
                        .HasColumnType("int")
                        .HasColumnName("C_ID");

                    b.Property<string>("ImgePath")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("imge_path");

                    b.Property<string>("PName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("P_name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("PId")
                        .HasName("PK__product__A3420A777D846025");

                    b.HasIndex("CId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Review", b =>
                {
                    b.Property<int>("RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("R_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("P_ID");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("UId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("U_ID");

                    b.HasKey("RId")
                        .HasName("PK__Review__DE152E899061AB71");

                    b.HasIndex("PId");

                    b.HasIndex("UId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", "UIdNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK__cart__U_ID__3D5E1FD2");

                    b.Navigation("UIdNavigation");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.Product", "PIdNavigation")
                        .WithMany("CartItem")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__cart_item__P_ID__46E78A0C");

                    b.HasOne("OnLineStore.Domain.Entities.Cart", "TIdNavigation")
                        .WithMany("CartItems")
                        .HasForeignKey("TId")
                        .HasConstraintName("FK__cart_item__T_ID__47DBAE45");

                    b.Navigation("PIdNavigation");

                    b.Navigation("TIdNavigation");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.Cart", "TIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("TId")
                        .HasConstraintName("FK___Order__T_ID__440B1D61");

                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", "UIdNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK___Order__U_ID__4316F928");

                    b.Navigation("TIdNavigation");

                    b.Navigation("UIdNavigation");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Product", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.Catagory", "CIdNavigation")
                        .WithMany("Products")
                        .HasForeignKey("CId")
                        .HasConstraintName("FK__product__C_ID__403A8C7D");

                    b.Navigation("CIdNavigation");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Review", b =>
                {
                    b.HasOne("OnLineStore.Domain.Entities.Product", "PIdNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("PId")
                        .HasConstraintName("FK__Review__P_ID__4BAC3F29");

                    b.HasOne("OnLineStore.Domain.Entities.ApplicationUser", "UIdNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("UId")
                        .HasConstraintName("FK__Review__U_ID__4AB81AF0");

                    b.Navigation("PIdNavigation");

                    b.Navigation("UIdNavigation");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Catagory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnLineStore.Domain.Entities.Product", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
